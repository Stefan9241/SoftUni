01. Employee Address

SELECT TOP (5)EmployeeID,JobTitle,e.AddressID,AddressText
 FROM Employees AS e
 JOIN Addresses  AS a ON e.AddressID = a.AddressID
 ORDER BY a.AddressID
----------------------------------------------------------------------------------------
02. Addresses with Towns

SELECT TOP (50) e.FirstName,e.LastName,t.Name,a.AddressText
FROM Employees AS e
JOIN Addresses AS a ON e.AddressID = a.AddressID
JOIN Towns AS t ON t.TownID = a.TownID
ORDER BY e.FirstName,e.LastName
----------------------------------------------------------------------------------------
03. Sales Employees

SELECT e.EmployeeID,e.FirstName AS [FirstName],e.LastName AS [LastName],d.Name AS [DepartmentName]
FROM Employees AS e
JOIN Departments AS d ON e.DepartmentID = d.DepartmentID
WHERE d.Name LIKE 'Sales'
ORDER BY e.EmployeeID
----------------------------------------------------------------------------------------
04. Employee Departments

SELECT TOP (5) e.EmployeeID,e.FirstName AS [FirstName],e.Salary,d.Name AS [DepartmentName]
 FROM Employees AS e
LEFT JOIN Departments as d ON e.DepartmentID = d.DepartmentID
WHERE e.Salary > 15000
ORDER BY e.DepartmentID
----------------------------------------------------------------------------------------
05. Employees Without Projects

SELECT TOP (3)e.EmployeeID,e.FirstName
FROM Employees AS e
LEFT JOIN EmployeesProjects as ep ON e.EmployeeID = ep.EmployeeID
WHERE ep.ProjectID IS NULL
ORDER BY e.EmployeeID ASC
----------------------------------------------------------------------------------------
06. Employees Hired After

SELECT e.FirstName AS [FirstName],e.LastName AS [LastName],e.HireDate AS [HireDate],d.Name AS [DeptName]
FROM Employees AS e
LEFT JOIN Departments AS d ON d.DepartmentID = e.DepartmentID
WHERE e.HireDate > '1.1.1999' AND d.Name IN ('Sales','Finance')
ORDER BY e.HireDate
----------------------------------------------------------------------------------------
07. Employees With Project

SELECT TOP (5) e.EmployeeID,e.FirstName,p.Name
FROM Employees AS e
JOIN EmployeesProjects ep ON e.EmployeeID = ep.EmployeeID
JOIN Projects as p ON ep.ProjectID = p.ProjectID
WHERE StartDate > '2002.08.13' AND p.EndDate IS NULL
ORDER BY e.EmployeeID ASC
----------------------------------------------------------------------------------------
08. Employee 24

SELECT e.EmployeeID,e.FirstName,
	CASE
		WHEN YEAR(StartDate) >= 2005 THEN NULL
		ELSE p.Name 
	END AS ProjectName
FROM Employees AS E
LEFT JOIN EmployeesProjects AS ep ON e.EmployeeID = ep.EmployeeID
LEFT JOIN Projects AS p ON ep.ProjectID = p.ProjectID
WHERE e.EmployeeID = 24
----------------------------------------------------------------------------------------
09. Employee Manager

SELECT e.EmployeeID,e.FirstName,e.ManagerID,M.FirstName
FROM Employees AS E
JOIN Employees AS M ON M.EmployeeID = E.ManagerID
WHERE e.ManagerID IN ( 3,7)
ORDER BY e.EmployeeID
----------------------------------------------------------------------------------------
10. Employees Summary

SELECT TOP (50)
emp.EmployeeID,emp.FirstName + ' ' + emp.LastName AS [EmployeeName],
mng.FirstName + ' ' + mng.LastName AS [ManagerName],
dep.Name AS [DepartmentName]
FROM Employees AS emp
JOIN Employees AS mng ON emp.ManagerID = mng.EmployeeID
JOIN Departments AS dep ON emp.DepartmentID = dep.DepartmentID
ORDER BY emp.EmployeeID
----------------------------------------------------------------------------------------
11. Min Average Salary

SELECT TOP (1)
AVG(Salary) as MinAverageSalary
FROM Employees
Group BY DepartmentID
ORDER BY MinAverageSalary
----------------------------------------------------------------------------------------
12. Highest Peaks in Bulgaria

SELECT c.CountryCode,mo.MountainRange,p.PeakName,p.Elevation
FROM Countries AS c
 JOIN MountainsCountries AS mc ON mc.CountryCode = c.CountryCode
 JOIN Mountains AS mo ON mo.Id = mc.MountainId
 JOIN Peaks AS p ON p.MountainId = mo.Id
WHERE c.CountryCode = 'BG' AND p.Elevation > 2835
ORDER BY p.Elevation DESC
----------------------------------------------------------------------------------------
13. Count Mountain Ranges

SELECT c.CountryCode,COUNT(*)
FROM Countries AS C
JOIN MountainsCountries AS m ON m.CountryCode = c.CountryCode
JOIN Mountains AS mou ON mou.Id = m.MountainId
WHERE c.CountryCode IN ('RU','BG','US')
GROUP BY c.CountryCode
----------------------------------------------------------------------------------------
14. Countries With or Without Rivers

SELECT TOP(5) c.CountryName,r.RiverName
FROM Countries AS c
LEFT JOIN CountriesRivers AS cr ON c.CountryCode = cr.CountryCode
LEFT JOIN Rivers AS r ON r.Id = cr.RiverId
WHERE c.ContinentCode = 'AF'
ORDER BY c.CountryName
----------------------------------------------------------------------------------------
15. * Continents and Currencies *

SELECT ContinentCode,CurrencyCode,Total AS [CurrencyUsage] FROM 
(
SELECT ContinentCode,CurrencyCode,COUNT(CurrencyCode) AS Total,
	DENSE_RANK() OVER (PARTITION BY ContinentCode ORDER BY COUNT(CurrencyCode) DESC) AS Ranked
	FROM Countries
	GROUP BY ContinentCode,CurrencyCode
) AS k
WHERE Ranked = 1 AND Total > 1
ORDER BY ContinentCode
----------------------------------------------------------------------------------------
16. Countries Without any Mountains

SELECT COUNT(*) AS Count
FROM Countries AS c
LEFT JOIN MountainsCountries AS m ON c.CountryCode = m.CountryCode
WHERE m.MountainId IS NULL
----------------------------------------------------------------------------------------
17. Highest Peak and Longest River by Country

SELECT TOP (5) CountryName,MAX(p.Elevation) AS HighestPeak, MAX(r.Length) AS LongestRiver
FROM Countries AS c
 LEFT JOIN MountainsCountries AS mc ON mc.CountryCode = c.CountryCode
 LEFT JOIN Mountains AS m ON m.Id = mc.MountainId
 LEFT JOIN Peaks AS p ON p.MountainId = m.Id
 LEFT JOIN CountriesRivers AS cr ON cr.CountryCode = c.CountryCode
 LEFT JOIN Rivers AS r ON r.Id = cr.RiverId
GROUP BY CountryName
ORDER BY HighestPeak DESC, LongestRiver DESC, CountryName
----------------------------------------------------------------------------------------
18. Highest Peak Name and Elevation by Country

SELECT TOP(5) k.CountryName,k.PeakName, k.HighestPeak, k.MountainRange
FROM
 (SELECT CountryName, 
		ISNULL(p.PeakName, '(no highest peak)') AS PeakName,
		ISNULL(m.MountainRange, '(no mountain)') AS MountainRange,
		ISNULL(MAX(p.Elevation),0) AS HighestPeak,
		DENSE_RANK() OVER (PARTITION BY CountryName ORDER BY MAX(p.Elevation) DESC) AS Ranked
		FROM Countries AS c
		LEFT JOIN MountainsCountries AS mc ON mc.CountryCode = c.CountryCode
		LEFT JOIN Mountains AS m ON m.Id = mc.MountainId
		LEFT JOIN Peaks AS p ON p.MountainId = m.Id
GROUP BY CountryName, p.PeakName, m.MountainRange
 ) AS k
WHERE Ranked = 1
ORDER BY CountryName,PeakName
----------------------------------------------------------------------------------------
