01. DDL

CREATE TABLE Cities
(
	Id INT NOT NULL PRIMARY KEY IDENTITY,
	Name NVARCHAR(20) NOT NULL,
	CountryCode CHAR(2) NOT NULL
)

CREATE TABLE Hotels
(
	Id INT NOT NULL PRIMARY KEY IDENTITY,
	Name NVARCHAR(30) NOT NULL,
	CityId INT NOT NULL REFERENCES Cities(Id),
	EmployeeCount INT NOT NULL,
	BaseRate DECIMAL(18,2)
)

CREATE TABLE Rooms
(
	Id INT NOT NULL PRIMARY KEY IDENTITY,
	Price DECIMAL(18,2) NOT NULL,
	Type NVARCHAR(20) NOT NULL,
	Beds INT NOT NULL,
	HotelId INT NOT NULL REFERENCES Hotels(Id)
)

CREATE TABLE Trips
(
	Id INT NOT NULL PRIMARY KEY IDENTITY,
	RoomId INT NOT NULL REFERENCES Rooms(Id),
	BookDate DATE NOT NULL,
	ArrivalDate DATE NOT NULL,
	ReturnDate DATE NOT NULL,
	CancelDate DATE,
	CHECK(BookDate < ArrivalDate),
	CHECK(ArrivalDate < ReturnDate)
)

CREATE TABLE Accounts
(
	Id INT NOT NULL PRIMARY KEY IDENTITY,
	FirstName NVARCHAR(50) NOT NULL,
	MiddleName NVARCHAR(20),
	LastName NVARCHAR(50) NOT NULL,
	CityId INT NOT NULL REFERENCES Cities(Id),
	BirthDate DATE NOT NULL,
	Email VARCHAR(100) NOT NULL UNIQUE
)

CREATE TABLE AccountsTrips
(
	AccountId INT NOT NULL REFERENCES Accounts(Id),
	TripId INT NOT NULL REFERENCES Trips(Id),
	Luggage INT NOT NULL CHECK(Luggage >= 0)
	PRIMARY KEY(AccountId,TripId),
)
--------------------------------------------------------------------------------------------
02. Insert

INSERT INTO Accounts(FirstName,MiddleName,LastName,CityId,BirthDate,Email)
VALUES
('John','Smith','Smith',34,'1975-07-21','j_smith@gmail.com'),
('Gosho',NULL,'Petrov',11,'1978-05-16','g_petrov@gmail.com'),
('Ivan','Petrovich','Pavlov',59	,'1849-09-26','i_pavlov@softuni.bg'),
('Friedrich','Wilhelm','Nietzsche',2,'1844-10-15','f_nietzsche@softuni.bg')

INSERT INTO Trips(RoomId,BookDate,ArrivalDate,ReturnDate,CancelDate)
VALUES
(101,'2015-04-12','2015-04-14','2015-04-20','2015-02-02'),
(102,'2015-07-07','2015-07-15','2015-07-22','2015-04-29'),
(103,'2013-07-17','2013-07-23','2013-07-24',NULL),
(104,'2012-03-17','2012-03-31','2012-04-01','2012-01-10'),
(109,'2017-08-07','2017-08-28','2017-08-29',NULL)
--------------------------------------------------------------------------------------------
03. Update

UPDATE Rooms
SET Price = Price * 1.14
WHERE HotelId IN (5,7,9)
--------------------------------------------------------------------------------------------
04. Delete

DELETE FROM AccountsTrips WHERE AccountId = 47
--------------------------------------------------------------------------------------------
05. EEE-Mails

SELECT a.FirstName,a.LastName,CONVERT(varchar,a.BirthDate,110),c.Name,a.Email
FROM Accounts AS a
LEFT JOIN Cities AS c ON a.CityId = c.Id
WHERE a.Email LIKE 'e%'
ORDER BY c.Name
--------------------------------------------------------------------------------------------
06. City Statistics

SELECT c.Name,COUNT(*)AS HotelCount
FROM Cities AS c
JOIN Hotels AS h ON c.Id = h.CityId
GROUP BY c.Id,c.Name
ORDER BY HotelCount DESC,c.Name
--------------------------------------------------------------------------------------------
07. Longest and Shortest Trips

SELECT a.Id,a.FirstName + ' ' + a.LastName,
	MAX(DATEDIFF(DAY,t.ArrivalDate,t.ReturnDate)),
	MIN(DATEDIFF(DAY,t.ArrivalDate,t.ReturnDate))
FROM Accounts AS a
JOIN AccountsTrips AS at ON at.AccountId = a.Id
JOIN Trips AS t ON t.Id = at.TripId
WHERE a.MiddleName IS NULL AND t.CancelDate IS NULL
GROUP BY a.Id,a.FirstName + ' ' + a.LastName
ORDER BY MAX(DATEDIFF(DAY,t.ArrivalDate,t.ReturnDate)) DESC,
	 MIN(DATEDIFF(DAY,t.ArrivalDate,t.ReturnDate))
--------------------------------------------------------------------------------------------
08. Metropolis

SELECT TOP(10) a.CityId,c.Name,c.CountryCode,COUNT(*) 
FROM Cities AS c
JOIN Accounts AS a ON a.CityId = c.Id
GROUP BY a.CityId,c.Name,c.CountryCode
ORDER BY COUNT(*) DESC
--------------------------------------------------------------------------------------------
09. Romantic Getaways

SELECT a.Id,a.Email,c.Name,Count(*)
FROM Accounts AS a
LEFT JOIN AccountsTrips AS acT ON act.AccountId = a.Id
LEFT JOIN Trips AS t ON t.Id = acT.TripId
LEFT JOIN Rooms AS r ON r.Id = t.RoomId
LEFT JOIN Hotels AS h on h.Id = r.HotelId
LEFT JOIN Cities AS c ON c.Id = h.CityId
WHERE a.CityId = h.CityId
GROUP BY a.CityId,a.Id,a.Email,c.Name
ORDER BY COUNT(*) DESC,a.CityId
--------------------------------------------------------------------------------------------
10. GDPR Violation

SELECT t.Id AS Id,
a.FirstName + ' ' + IIF(a.MiddleName IS NULL,'',a.middleName + ' ') + a.LastName AS FullName,
ac.Name AS [From],
hc.Name AS [To],
CASE 
	WHEN t.CancelDate IS NOT NULL THEN 'Canceled'
	WHEN t.CancelDate IS NULL THEN CONVERT(varchar,DATEDIFF(DAY,t.ArrivalDate,t.returnDate)) + ' days'
END AS Duration
FROM AccountsTrips AS at
LEFT JOIN Accounts AS a ON a.Id = at.AccountId
LEFT JOIN Cities AS ac ON a.CityId = ac.Id
LEFT JOIN Trips AS t ON at.TripId = t.Id
LEFT JOIN Rooms AS r ON t.RoomId = r.Id
LEFT JOIN Hotels AS h ON r.HotelId = h.Id
LEFT JOIN Cities AS hc ON hc.Id = h.CityId
ORDER BY FullName,t.Id
--------------------------------------------------------------------------------------------
11. Available Room

CREATE FUNCTION udf_GetAvailableRoom(@HotelId INT, @Date DATE, @People INT)
RETURNS NVARCHAR(MAX)
BEGIN

DECLARE @roomInfo VARCHAR(MAX) = 
(SELECT TOP(1) 'Room ' + CONVERT(VARCHAR,r.Id) + ': ' + r.Type + ' (' + CONVERT(varchar,r.beds) + ' beds) - $'+ 
CONVERT(varchar,(BaseRate + Price) * @People)
FROM Rooms r
JOIN Hotels h ON r.HotelId = h.id
WHERE Beds >= @People AND HotelId = @hotelId 
AND NOT EXISTS(SELECT * FROM Trips t WHERE t.RoomId = r.Id
AND CancelDate IS NULL AND @Date BETWEEN ArrivalDate AND ReturnDate)
ORDER BY ((BaseRate + Price) * @People) DESC);

IF(@roomInfo IS NULL)
	RETURN 'No rooms available';

RETURN @roomInfo
END
--------------------------------------------------------------------------------------------
12. Switch Room

CREATE PROC usp_SwitchRoom(@TripId INT, @TargetRoomId INT)
AS

DECLARE @tripHotelId INT = (SELECT r.HotelId 
					from Trips t
					JOIN Rooms r ON t.RoomId = r.Id
					WHERE t.Id = @TripId);

DECLARE @TargetRoomHotelId INT = (SELECT HotelId FROM Rooms
				  WHERE Id = @TargetRoomId);

IF(@tripHotelId != @TargetRoomHotelId)
	THROW 50001,'Target room is in another hotel!',1

DECLARE @TripAccounts INT = (SELECT COUNT(*) FRom AccountsTrips
			 WHERE TripId = @TripId)

DECLARE @targetRoomBeds INT = (SELECT Beds FROM Rooms WHERE Id = @TargetRoomId)

IF (@TripAccounts > @targetRoomBeds)
THROW 50002, 'Not enough beds in target room!',1

UPDATE Trips SET RoomId = @TargetRoomId WHERE Id = @TripId
--------------------------------------------------------------------------------------------