01. DDL

CREATE TABLE Clients
(
	ClientId INT PRIMARY KEY IDENTITY,
	FirstName VARCHAR(50) NOT NULL,
	LastName VARCHAR(50) NOT NULL,
	Phone CHAR(12) NOT NULL,
	CHECK(Len(Phone) = 12)
)

CREATE TABLE Mechanics
(
	MechanicId INT PRIMARY KEY IDENTITY,
	FirstName VARCHAR(50) NOT NULL,
	LastName VARCHAR(50) NOT NULL,
	Address VARCHAR(255) NOT NULL
)
CREATE TABLE Models
(
	ModelId INT PRIMARY KEY IDENTITY,
	Name VARCHAR(50) UNIQUE NOT NULL
)
CREATE TABLE Jobs
(
	JobId INT PRIMARY KEY IDENTITY,
	ModelId INT REFERENCES Models(ModelId) NOT NULL,
	Status VARCHAR(11) DEFAULT 'Pending' CHECK(Status IN ('Pending','In Progress','Finished')) NOT NULL,
	ClientId INT REFERENCES Clients(ClientId) NOT NULL,
	MechanicId INT REFERENCES Mechanics(MechanicId),
	IssueDate DATE NOT NULL,
	FinishDate DATE
)

CREATE TABLE Orders
(
	OrderId INT PRIMARY KEY IDENTITY,
	JobId INT NOT NULL REFERENCES Jobs(JobId),
	IssueDate DATE,
	Delivered BIT DEFAULT 0
)

CREATE TABLE Vendors
(
	VendorId INT PRIMARY KEY IDENTITY,
	Name VARCHAR(50) UNIQUE NOT NULL
)

CREATE TABLE Parts
(
	PartId INT PRIMARY KEY IDENTITY,
	SerialNumber VARCHAR(50) UNIQUE NOT NULL,
	Description VARCHAR(255),
	Price DECIMAL(6,2) NOT NULL CHECK(Price > 0 AND Price <= 9999.99),
	VendorId INT NOT NULL REFERENCES Vendors(VendorId),
	StockQty INT DEFAULT 0 CHECK(StockQty >= 0)
)

CREATE TABLE OrderParts
(
	OrderId INT REFERENCES Orders(OrderId) NOT NULL,
	PartId INT REFERENCES Parts(PartId) NOT NULL,
	Quantity INT DEFAULT 1 CHECK(Quantity > 0),
	
	CONSTRAINT PK_OrdersParts PRIMARY KEY(OrderId,PartId)
)

CREATE TABLE PartsNeeded
(
	JobId INT REFERENCES Jobs(JobId) NOT NULL,
	PartId INT REFERENCES Parts(PartId) NOT NULL,
	Quantity INT DEFAULT 1 Check(Quantity > 0),

	CONSTRAINT PK_JobsParts PRIMARY KEY(JobId,PartId)
)
-------------------------------------------------------------------------------------------
02. Insert

INSERT INTO Clients(FirstName,LastName,Phone) VALUES
('Teri',	'Ennaco',	'570-889-5187'),
('Merlyn',	'Lawler',	'201-588-7810'),
('Georgene',	'Montezuma',	'925-615-5185'),
('Jettie',	'Mconnell',	'908-802-3564'),
('Lemuel',	'Latzke	','631-748-6479'),
('Melodie',	'Knipp',	'805-690-1682'),
('Candida',	'Corbley','908-275-8357')


INSERT INTO Parts (SerialNumber,Description,Price,VendorId)
VALUES
('WP8182119','Door Boot Seal',117.86,2),
('W10780048','Suspension Rod',42.81,1),
('W10841140','Silicone Adhesive',6.77,	4),
('WPY055980','High Temperature Adhesive',13.94,3)
-------------------------------------------------------------------------------------------
03. Update

UPDATE Jobs
SET MechanicId = 3,Status = 'In Progress'
WHERE Status = 'Pending'
-------------------------------------------------------------------------------------------
04. Delete

DELETE
FROM OrderParts
WHERE OrderId = 19

DELETE
FROM Orders
WHERE OrderId = 19
-------------------------------------------------------------------------------------------
05. Mechanic Assignments

SELECT FirstName + ' ' + LastName AS FullName,Status,IssueDate
FROM Mechanics AS m
JOIN Jobs AS j ON j.MechanicId = m.MechanicId
ORDER BY m.MechanicId,j.IssueDate,j.JobId
-------------------------------------------------------------------------------------------
06. Current Clients

SELECT FirstName + ' ' + LastName AS Client,DATEDIFF(DAY,j.IssueDate,'2017-04-24') AS [Days going],Status
FROM Clients c
JOIN Jobs j ON c.ClientId = j.ClientId
WHERE j.FinishDate IS NULL
ORDER BY [Days going] DESC,c.ClientId
-------------------------------------------------------------------------------------------
07. Mechanic Performance

SELECT m.FirstName + ' ' + m.LastName AS FullName, AVG(DATEDIFF(DAY,IssueDate,FinishDate)) AS Average
FROM Mechanics AS m	
JOIN Jobs AS j ON m.MechanicId = j.MechanicId
GROUP BY j.MechanicId,m.FirstName + ' ' + m.LastName
ORDER BY j.MechanicId
-------------------------------------------------------------------------------------------
08. Available Mechanics

SELECT m.FirstName + ' ' + m.LastName AS FullName
FROM Mechanics m
LEFT JOIN Jobs j ON m.MechanicId = j.MechanicId
WHERE j.JobId IS NULL OR 
(
	SELECT COUNT(JobId) FROM Jobs
	WHERE Status != 'Finished' AND MechanicId = m.MechanicId
	GROUP BY MechanicId,Status
) IS NULL
GROUP BY m.MechanicId,m.FirstName + ' ' + m.LastName
ORDER BY m.MechanicId
-------------------------------------------------------------------------------------------
09. Past Expenses

SELECT j.JobId, ISNULL(SUM(op.Quantity * p.Price), 0) as Total
FROM Jobs  AS j
LEFT JOIN Orders AS o ON j.JobId = o.JobId
LEFT JOIN OrderParts AS op ON op.OrderId = o.OrderId
LEFT JOIN Parts AS p ON p.PartId = op.PartId
WHERE j.Status = 'Finished'
GROUP BY j.JobId
ORDER BY Total DESC,j.JobId
-------------------------------------------------------------------------------------------
10. Missing Parts

SELECT p.PartId,
	p.Description,
	pn.Quantity AS [Required],
	p.StockQty AS [In Stock],
	IIF(o.Delivered = 0, op.Quantity,0)
FROM Parts AS p
LEFT  JOIN PartsNeeded AS pn ON pn.PartId = p.PartId
LEFT  JOIN OrderParts AS op ON op.PartId = p.PartId
LEFT  JOIN Jobs AS j ON j.JobId = pn.JobId
LEFT JOIN Orders AS o ON o.JobId = j.JobId
WHERE j.Status != 'Finished' AND p.StockQty + IIF(o.Delivered = 0, op.Quantity,0) < pn.Quantity
ORDER BY PartId
-------------------------------------------------------------------------------------------
11. Place Order

CREATE PROCEDURE usp_PlaceOrder(
					@jobId INT,
					@serialNumber VARCHAR(50),
					@quantity INT)
AS
BEGIN

IF @quantity <= 0
	THROW 50012,'Part quantity must be more than zero!',1
ELSE IF NOT EXISTS(SELECT * FROM Jobs j WHERE j.JobId = @jobId)
	THROW 50013, 'Job not found!',1
ELSE IF EXISTS(SELECT * FROM Jobs j Where j.JobId = @jobId AND J.Status = 'Finished')
	THROW 50011, 'This job is not active!',1
ELSE IF NOT EXISTS(SELECT * FROM Parts P WHERE P.SerialNumber = @serialNumber)
	THROW 50014, 'Part not found!', 1

DECLARE @PartId INT 
SELECT @PartId = P.PartId FROM Parts P WHERE P.SerialNumber=@serialNumber

DECLARE @ExistingOrderId INT
SELECT @ExistingOrderId = O.OrderId FROM Orders o
	JOIN Jobs J ON J.JobId = O.JobId
	JOIN OrderParts OP ON OP.OrderId=O.OrderId
	 WHERE O.IssueDate IS NULL AND J.JobId = @jobId AND OP.PartId = @PartId

IF (@ExistingOrderId IS NULL)
BEGIN 
	INSERT INTO Orders(JobId,IssueDate)
	VALUES
	(@jobId,Null)

	SELECT @ExistingOrderId = O.OrderId FROM Orders O
	JOIN Jobs J ON J.JobId = O.JobId
	WHERE O.IssueDate IS NULL AND J.JobId = @jobId

	   INSERT INTO OrderParts(OrderId,PartId,Quantity)
	   VALUES
	   (@ExistingOrderId,@PartId,@quantity)
END
ELSE 
	BEGIN
		UPDATE OrderParts
		SET Quantity += @quantity
		WHERE OrderId = @ExistingOrderId
	END
END
-------------------------------------------------------------------------------------------
12. Cost of Order

CREATE FUNCTION udf_GetCost(@jobId INT)
RETURNS DECIMAL(15,2)
AS
BEGIN
DECLARE @result DECIMAL(15,2);
SET @result = (
SELECT SUM(p.Price * op.Quantity)
	FROM Jobs AS j
	JOIN Orders AS o ON o.JobId = j.JobId
	JOIN OrderParts AS op ON op.OrderId = o.OrderId
	JOIN Parts AS p ON p.PartId = op.PartId
WHERE j.JobId = @jobId
GROUP BY j.JobId )

IF(@result IS NULL)
 SET @result = 0

RETURN @result

END
-------------------------------------------------------------------------------------------